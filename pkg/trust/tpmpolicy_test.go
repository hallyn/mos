package trust

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var cases = []struct {
	Input  []byte
	Output []byte
	Ok     bool
}{
	{
		[]byte("CE CF 08 59 D0 C8 2F 9B 07 4D 48 D3 00 CC 83 DA E0 5D F9 8D A4 14 4F 4B EA EF 88 FA F9 67 F3 8C"),
		[]byte{0xcf, 0xce, 0x59, 0x08, 0xc8, 0xd0, 0x9b, 0x2f,
			0x4d, 0x07, 0xd3, 0x48, 0xcc, 0x00, 0xda, 0x83,
			0x5d, 0xe0, 0x8d, 0xf9, 0x14, 0xa4, 0x4b, 0x4f,
			0xef, 0xea, 0xfa, 0x88, 0x67, 0xf9, 0x8c, 0xf3},
		true,
	},
	{
		[]byte("FS0:\\>   CE CF 08 59 D0 C8 2F 9B 07 4D 48 D3 00 CC 83 DA E0 5D F9 8D A4 14 4F 4B EA EF 88 FA F9 67 F3 8C"),
		[]byte{0xcf, 0xce, 0x59, 0x08, 0xc8, 0xd0, 0x9b, 0x2f,
			0x4d, 0x07, 0xd3, 0x48, 0xcc, 0x00, 0xda, 0x83,
			0x5d, 0xe0, 0x8d, 0xf9, 0x14, 0xa4, 0x4b, 0x4f,
			0xef, 0xea, 0xfa, 0x88, 0x67, 0xf9, 0x8c, 0xf3},
		true,
	},
	{
		[]byte("[pcr07]  CE CF 08 59 D0 C8 2F 9B 07 4D 48 D3 00 CC 83 DA E0 5D F9 8D A4 14 4F 4B EA EF 88 FA F9 67 F3 8C"),
		[]byte{0xcf, 0xce, 0x59, 0x08, 0xc8, 0xd0, 0x9b, 0x2f,
			0x4d, 0x07, 0xd3, 0x48, 0xcc, 0x00, 0xda, 0x83,
			0x5d, 0xe0, 0x8d, 0xf9, 0x14, 0xa4, 0x4b, 0x4f,
			0xef, 0xea, 0xfa, 0x88, 0x67, 0xf9, 0x8c, 0xf3},
		true,
	},
	{
		[]byte{0xcf, 0xce, 0x59, 0x08, 0xc8, 0xd0, 0x9b, 0x2f,
			0x4d, 0x07, 0xd3, 0x48, 0xcc, 0x00, 0xda, 0x83,
			0x5d, 0xe0, 0x8d, 0xf9, 0x14, 0xa4, 0x4b, 0x4f,
			0xef, 0xea, 0xfa, 0x88, 0x67, 0xf9, 0x8c, 0xf3},
		[]byte{0xcf, 0xce, 0x59, 0x08, 0xc8, 0xd0, 0x9b, 0x2f,
			0x4d, 0x07, 0xd3, 0x48, 0xcc, 0x00, 0xda, 0x83,
			0x5d, 0xe0, 0x8d, 0xf9, 0x14, 0xa4, 0x4b, 0x4f,
			0xef, 0xea, 0xfa, 0x88, 0x67, 0xf9, 0x8c, 0xf3},
		true,
	},
	{
		[]byte("[pcr07]"),
		[]byte{},
		false,
	},
	{
		[]byte("CE CF 08 59 D0 C8 2F 9B 07 4D 48 D3 00 CC 83 DA E0 5D F9 8D A4 14 4F 4B EA EF 88 FA F9 67 F3"),
		[]byte{},
		false,
	},
}

func TestReadPcr7(t *testing.T) {
	assert := assert.New(t)

	for i, c := range cases {
		res, err := parsePcr7(c.Input)
		if c.Ok {
			assert.Nilf(err, "test %d: input: %s - expected no error, got: %v", i, c.Input, err)
			assert.Equalf(res, c.Output, "test %d: input: %s - expected %v, got %v", i, c.Input, c.Output, res)
		} else {
			assert.NotNilf(err, "test %d: input: %s - expected an error, got none", i, c.Input)
		}
	}
}
